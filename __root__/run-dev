#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright 2014 Red Hat, Inc.
# Part of clufter project
# Licensed under GPLv2+ (a copy included | http://gnu.org/licenses/gpl-2.0.txt)
"""Machinery entry point -- to be run from in-repo location"""
__author__ = "Jan Pokorn√Ω <jpokorny @at@ Red Hat .dot. com>"

import sys
from inspect import getabsfile
from imp import find_module, load_module
from os.path import abspath, basename, dirname, exists, join, realpath


# inspired by http://stackoverflow.com/a/22881871
def get_script_path(follow_symlinks=True):
    if getattr(sys, 'frozen', False):  # PyInstaller, cx_Freeze
        path = abspath(sys.executable)
    else:
        path = getabsfile(get_script_path)
    return path

script_path = get_script_path()
real_script_path = realpath(script_path)


if __name__ != '__main__':
    # XXX recognize when this file executed directly and report

    # if not run from main-bootstrap, verbose logging desired
    from os import environ
    import logging
    logging.basicConfig()
    logging.getLogger().setLevel(environ.get('LOGLEVEL') or logging.DEBUG)

root = dirname(real_script_path)
if not exists(join(root, '__root__')):
    root = dirname(root)
sys.path.insert(0, dirname(root))

# set the correct __package__ for relative imports
__package__ = basename(root)  # this also helps to avoid package clash
if __package__ not in sys.modules:
    fp, pathname, description = find_module(__package__)
    load_module(__package__, fp, pathname, description)

if __name__ == '__main__':
    if basename(script_path) == 'run-dev':
        from .main import run
        sys.exit(run(sys.argv))

# XXX previous attempt to get unittest.main executed automagically at the end,
#     which was failing likely because unittest uses Threading that register
#     another atexit handler somehow interfering w/ its main started from here
#    elif ('tests' == basename(dirname(script_path))
#          == basename(dirname(abspath(__file__))):
#        from atexit import register
#        from unittest import main
#        register(main)
#        # hmm, see https://code.google.com/p/modwsgi/issues/detail?id=197
#        # https://github.com/GrahamDumpleton/mod_wsgi/commit/fdef274
#        register(lambda: __import__('dummy_threading'))
